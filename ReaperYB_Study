
<!DOCTYPE html>

<html dir="rtl" lang="ar">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<title>ReaperYBSTUDY 3.1</title>
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet"/>
<style>
        :root {
            --primary: #6d552d;
            --accent: #d4af37;
            --dark: #1c1c1c;
            --light: #ffffff;
            --success: #4CAF50;
            --warning: #FFC107;
            --danger: #f44336;
        }
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Cairo', sans-serif;
        }
        body {
            background: #1a1a1a;
            color: #f5f5f5;
            min-height: 100vh;
            overflow-x: hidden;
            transition: all 0.3s ease;
        }
        header {
            background: #d4af37;
            padding: 1rem;
            text-align: center;
            position: fixed;
            width: 100%;
            z-index: 1000;
            color: #f5f5f5;
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.3);
        }
        nav {
            display: flex;
            justify-content: center;
            gap: 1rem;
        }
        nav a {
            color: #d4af37;
            text-decoration: none;
            font-weight: bold;
            padding: 0.5rem 1rem;
            border-radius: 5px;
            transition: all 0.3s ease;
            background: #1a1a1a;
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.3);
        }
        nav a:hover {
            background: #f5f5f5;
            color: #1a1a1a;
        }
        .container {
            padding-top: 5rem;
            max-width: 1200px;
            margin: 0 auto;
        }
        .section {
            background: #1a1a1a;
            margin: 1rem 0;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0,0,0,0.5);
        }
        .button-group {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
            justify-content: center;
        }
        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 5px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            background: #d4af37;
            color: #1a1a1a;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
        }
        .btn:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.3);
            background: #d4af37;
        }
        .chart-container {
            margin: 2rem 0;
        }
        .stats-card {
            text-align: center;
            margin: 1rem;
            background: rgba(255,255,255,0.1);
            padding: 1rem;
            border-radius: 10px;
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);
        }
        .stats-card h3 {
            margin-bottom: 0.5rem;
            color: #d4af37;
        }
        .stats-value {
            font-size: 2rem;
        }
        footer {
            text-align: center;
            margin-top: 2rem;
            padding: 1rem;
            background: #d4af37;
            color: #f5f5f5;
        }
    
    .auth-container {
        position: absolute;
        top: 15px;
        right: 20px;
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .auth-btn {
        background: var(--accent);
        color: var(--light);
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 5px;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.3);
    }

    .auth-btn:hover {
        background: var(--primary);
        color: var(--light);
    }

    .user-profile {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .user-profile img {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        border: 2px solid var(--accent);
    }

    .user-profile span {
        color: var(--light);
        font-weight: bold;
    }
    </style>
<style>
        /* Enhanced Styles for Improved User Experience */
        .enhanced-theme {
            background: linear-gradient(to bottom, #1a1a1a, #121212);
            color: #f0f0f0;
        }
        .enhanced-theme header {
            background: #202020;
            color: #d4af37;
        }
        .enhanced-theme nav a {
            border: 1px solid #d4af37;
        }
        .enhanced-theme nav a:hover {
            background: #202020;
            color: #d4af37;
        }
        .enhanced-theme footer {
            background: #202020;
        }
        /* Add smooth transitions to interactive elements */
        .enhanced-theme button, .enhanced-theme input, .enhanced-theme select {
            transition: background 0.3s ease, transform 0.2s ease;
        }
    </style>
</head>
<body class="enhanced-theme">
<header>
<h1>ReaperYBSTUDY 3.1 🚀</h1>
<nav>
<a href="#pomodoro">مؤقت بومودورو</a>
<a href="#tasks">المهام</a>
<a href="#stats">الإحصائيات</a>
<a href="#planner">المخطط الأسبوعي</a>
<a href="#settings">الإعدادات</a>
</nav>
<div class="auth-container">
<div class="user-profile" id="userProfile" style="display: none;">
<img alt="صورة الحساب" id="userImage" src=""/>
<span id="userName"></span>
</div>
</div>

<div class="auth-buttons" style="float: right; margin-right: 1rem;">
<button id="registerBtn" onclick="showRegisterForm()" style="background: var(--accent); color: var(--dark); border: none; padding: 0.5rem 1rem; border-radius: 5px; margin-right: 0.5rem; cursor: pointer;">إنشاء حساب</button>
<button id="loginBtn" onclick="showLoginForm()" style="background: var(--accent); color: var(--dark); border: none; padding: 0.5rem 1rem; border-radius: 5px; cursor: pointer;">تسجيل الدخول</button>
</div>

<!-- Dynamic Register Form -->
<section id="registerForm" style="display: none; position: absolute; top: 70px; right: 10px; background: var(--dark); padding: 1rem; border-radius: 10px; text-align: center; width: 300px; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);">
<h3 style="color: var(--accent);">إنشاء حساب</h3>
<input id="username" placeholder="اسم المستخدم" style="margin-bottom: 0.5rem; width: 90%; padding: 0.5rem; border-radius: 5px; border: 1px solid var(--accent);" type="text"/>
<input id="password" placeholder="كلمة المرور" style="margin-bottom: 0.5rem; width: 90%; padding: 0.5rem; border-radius: 5px; border: 1px solid var(--accent);" type="password"/>
<input id="profileImage" style="margin-bottom: 0.5rem;" type="file"/>
<button onclick="registerUser()" style="background: var(--success); color: var(--light); border: none; padding: 0.5rem 1rem; border-radius: 5px; cursor: pointer;">إنشاء حساب</button>
</section>
<!-- Dynamic Login Form -->
<section id="loginForm" style="display: none; position: absolute; top: 70px; right: 10px; background: var(--dark); padding: 1rem; border-radius: 10px; text-align: center; width: 300px; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);">
<h3 style="color: var(--accent);">تسجيل الدخول</h3>
<input id="loginUsername" placeholder="اسم المستخدم" style="margin-bottom: 0.5rem; width: 90%; padding: 0.5rem; border-radius: 5px; border: 1px solid var(--accent);" type="text"/>
<input id="loginPassword" placeholder="كلمة المرور" style="margin-bottom: 0.5rem; width: 90%; padding: 0.5rem; border-radius: 5px; border: 1px solid var(--accent);" type="password"/>
<button onclick="loginUser()" style="background: var(--success); color: var(--light); border: none; padding: 0.5rem 1rem; border-radius: 5px; cursor: pointer;">تسجيل الدخول</button>
</section>

<div class="user-profile" id="userProfile" style="display: none; align-items: center; float: right; margin-right: 1rem;">
<img alt="صورة الحساب" id="userImage" style="width: 50px; height: 50px; border-radius: 50%; margin-right: 10px; border: 2px solid var(--accent);"/>
<span id="userName" style="color: var(--light); font-weight: bold;"></span>
</div>
</header>
    <div class="container">
        

<section id="pomodoro-clock" class="section timer">
    <h2>⏳ ساعة بومودورو</h2>
    <div class="clock-container">
        <div id="timerDisplay" class="circular-timer">
            <span id="timerText">60:00</span>
        </div>
    </div>
    <div class="button-group">
        <button class="btn" onclick="adjustTime(-5)">⏩</button>
        <button class="btn" onclick="toggleTimer()">⏯️</button>
        <button class="btn" onclick="adjustTime(5)">⏪</button>
        <button class="btn reset-btn" onclick="resetTimer()">🔄</button>
    </div>
</section>

<script>
    let timerInterval;
    let focusTime = 60; // وقت التركيز بالدقائق
    let breakTime = 15; // وقت الراحة بالدقائق
    let isFocusMode = true; // يبدأ بوضع التركيز
    let minutes = focusTime, seconds = 0;
    let isTimerRunning = false;

    function updateClockDisplay() {
        const timerText = document.getElementById('timerText');
        timerText.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

        const timerDisplay = document.getElementById('timerDisplay');
        const totalSeconds = (isFocusMode ? focusTime : breakTime) * 60;
        const elapsedSeconds = totalSeconds - (minutes * 60 + seconds);
        const percentage = (elapsedSeconds / totalSeconds) * 100;

        timerDisplay.style.background = `conic-gradient(
            ${isFocusMode ? '#FFC107' : '#4CAF50'} ${percentage}%,
            #1a1a1a ${percentage}%
        )`;
    }

    function toggleTimer() {
        if (isTimerRunning) {
            clearInterval(timerInterval);
        } else {
            timerInterval = setInterval(() => {
                if (seconds === 0) {
                    if (minutes === 0) {
                        clearInterval(timerInterval);
                        isFocusMode = !isFocusMode; // التبديل بين التركيز والراحة
                        switchMode();
                    } else {
                        minutes--;
                        seconds = 59;
                    }
                } else {
                    seconds--;
                }
                updateClockDisplay();
            }, 1000);
        }
        isTimerRunning = !isTimerRunning;
    }

    function adjustTime(value) {
        minutes = Math.max(0, minutes + value);
        seconds = 0;
        updateClockDisplay();
    }

    function resetTimer() {
        clearInterval(timerInterval);
        isFocusMode = true;
        minutes = focusTime;
        seconds = 0;
        isTimerRunning = false;
        updateClockDisplay();
    }

    function switchMode() {
        if (isFocusMode) {
            minutes = focusTime;
            showModal('💪 تركيز', 'حان وقت التركيز!');
        } else {
            minutes = breakTime;
            showModal('🛌 راحة', 'حان وقت الراحة!');
        }
        seconds = 0;
        updateClockDisplay();
        toggleTimer(); // يبدأ التوقيت تلقائيًا
    }

    updateClockDisplay(); // تحديث العرض عند التحميل
</script>

<style>
    .clock-container {
        display: flex;
        justify-content: center;
        align-items: center;
        margin: 2rem 0;
    }

    .circular-timer {
        width: 250px;
        height: 250px;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 2.5rem;
        font-weight: bold;
        color: #ffffff;
        border-radius: 50%;
        background: conic-gradient(#FFC107 0%, #1a1a1a 0%);
        box-shadow: 0 0 20px #FFC107, 0 0 30px rgba(255, 255, 255, 0.1);
        position: relative;
        transition: background 0.3s ease, box-shadow 0.3s ease;
    }

    .circular-timer::before {
        content: '';
        position: absolute;
        width: 90%;
        height: 90%;
        background: #1a1a1a;
        border-radius: 50%;
        box-shadow: inset 0 0 15px rgba(0, 0, 0, 0.5);
    }

    #timerText {
        z-index: 1;
    }

    .button-group {
        display: flex;
        justify-content: center;
        gap: 1rem;
        margin-top: 1rem;
    }

    .btn {
        padding: 0.5rem 1.5rem;
        font-size: 1.5rem;
        font-weight: bold;
        color: #fff;
        background: #333;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background 0.3s ease, transform 0.2s ease;
    }

    .btn:hover {
        background: #555;
        transform: scale(1.1);
    }

    .reset-btn {
        background: #4CAF50;
    }

    .reset-btn:hover {
        background: #66BB6A;
    }
</style>


<script>
    let timerInterval;
    let focusTime = 60; // دقائق التركيز
    let breakTime = 15; // دقائق الراحة
    let isFocusMode = true;
    let minutes = focusTime, seconds = 0;
    let isTimerRunning = false;

    function updateClockDisplay() {
        const minutesElement = document.getElementById('minutes');
        const secondsElement = document.getElementById('seconds');
        minutesElement.textContent = minutes.toString().padStart(2, '0');
        secondsElement.textContent = seconds.toString().padStart(2, '0');
    }

    function toggleTimer() {
        if (isTimerRunning) {
            clearInterval(timerInterval);
        } else {
            timerInterval = setInterval(() => {
                if (seconds === 0) {
                    if (minutes === 0) {
                        clearInterval(timerInterval);
                        isFocusMode = !isFocusMode;
                        switchMode();
                    } else {
                        minutes--;
                        seconds = 59;
                    }
                } else {
                    seconds--;
                }
                updateClockDisplay();
                updateCircularProgress();
            }, 1000);
        }
        isTimerRunning = !isTimerRunning;
    }

    function adjustTime(value) {
        minutes = Math.max(0, minutes + value);
        seconds = 0;
        updateClockDisplay();
        updateCircularProgress();
    }

    function resetTimer() {
        clearInterval(timerInterval);
        isFocusMode = true;
        minutes = focusTime;
        seconds = 0;
        isTimerRunning = false;
        updateClockDisplay();
        resetCircularProgress();
        updateTimerColors();
    }

    function switchMode() {
        if (isFocusMode) {
            minutes = focusTime;
            showModal('💪 تركيز', 'حان وقت التركيز!');
        } else {
            minutes = breakTime;
            showModal('🛌 راحة', 'حان وقت الراحة!');
        }
        seconds = 0;
        updateClockDisplay();
        resetCircularProgress();
        updateTimerColors();
        toggleTimer();
    }

    function updateCircularProgress() {
        const progressElement = document.querySelector('.circular-timer');
        const totalSeconds = (isFocusMode ? focusTime : breakTime) * 60;
        const elapsedSeconds = totalSeconds - (minutes * 60 + seconds);
        const percentage = (elapsedSeconds / totalSeconds) * 100;
        progressElement.style.background = `conic-gradient(
            ${isFocusMode ? '#FFC107' : '#4CAF50'} ${percentage}%,
            #1a1a1a ${percentage}%
        )`;
    }

    function resetCircularProgress() {
        const progressElement = document.querySelector('.circular-timer');
        progressElement.style.background = `conic-gradient(
            ${isFocusMode ? '#FFC107' : '#4CAF50'} 0%,
            #1a1a1a 0%
        )`;
    }

    function updateTimerColors() {
        const timerDisplay = document.getElementById('timerDisplay');
        timerDisplay.style.color = '#ffffff';
        timerDisplay.style.border = `5px solid ${isFocusMode ? '#FFC107' : '#4CAF50'}`;
        timerDisplay.style.boxShadow = `0 0 20px ${isFocusMode ? '#FFC107' : '#4CAF50'}`;
    }

    updateClockDisplay();
    updateTimerColors();
</script>

<style>
    .clock-container {
        display: flex;
        justify-content: center;
        align-items: center;
        margin: 2rem 0;
    }

    .circular-timer {
        width: 200px;
        height: 200px;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 2.5rem;
        font-weight: bold;
        color: #ffffff;
        border-radius: 50%;
        background: conic-gradient(#FFC107 0%, #1a1a1a 0%);
        box-shadow: 0 0 20px #FFC107;
        position: relative;
        transition: background 0.3s ease, color 0.3s ease, box-shadow 0.3s ease;
    }

    .button-group {
        display: flex;
        gap: 1rem;
        justify-content: center;
        margin-top: 1rem;
    }

    .btn {
        padding: 0.5rem 1.5rem;
        font-size: 1rem;
        font-weight: bold;
        color: #fff;
        background: #333;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background 0.3s ease, transform 0.2s ease;
    }

    .btn:hover {
        background: #555;
        transform: scale(1.1);
    }

    .reset-btn {
        background: #4CAF50;
    }

    .reset-btn:hover {
        background: #66BB6A;
    }
</style>
<script>
    let timerInterval;
    let minutes = 25;
    let seconds = 0;

    function updateClockDisplay() {
        document.getElementById('minutes').textContent = minutes.toString().padStart(2, '0');
        document.getElementById('seconds').textContent = seconds.toString().padStart(2, '0');
    }

    function startTimer() {
        clearInterval(timerInterval);
        timerInterval = setInterval(() => {
            if (seconds === 0) {
                if (minutes === 0) {
                    clearInterval(timerInterval);
                    showModal('⏰ انتهى', 'انتهى الوقت!');
                } else {
                    minutes--;
                    seconds = 59;
                }
            } else {
                seconds--;
            }
            updateClockDisplay();
        }, 1000);
    }

    function pauseTimer() {
        clearInterval(timerInterval);
    }

    function resetTimer() {
        clearInterval(timerInterval);
        minutes = 25;
        seconds = 0;
        updateClockDisplay();
    }

    function adjustTime(value) {
        minutes = Math.max(0, minutes + value);
        updateClockDisplay();
    }

    updateClockDisplay();

    
    </script>
    
<style>
    .digital-clock {
        font-size: 4rem;
        font-weight: bold;
        text-align: center;
        color: #d4af37;
        background: #1a1a1a;
        padding: 1rem 2rem;
        border-radius: 10px;
        margin: 2rem auto;
        width: fit-content;
        box-shadow: 0 8px 15px rgba(0, 0, 0, 0.5);
        letter-spacing: 0.2rem;
        font-family: 'Digital-7 Mono', sans-serif;
    }

    .auth-container {
        position: absolute;
        top: 15px;
        right: 20px;
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .auth-btn {
        background: var(--accent);
        color: var(--light);
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 5px;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.3);
    }

    .auth-btn:hover {
        background: var(--primary);
        color: var(--light);
    }

    .user-profile {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .user-profile img {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        border: 2px solid var(--accent);
    }

    .user-profile span {
        color: var(--light);
        font-weight: bold;
    }
    </style>
    
        </section>
        <section class="task-section">
    <h1 class="section-title">📋 قائمة المهام المطورة</h1>

    <!-- إضافة مهمة جديدة -->
    <div class="task-controls">
        <input type="text" id="task-input" placeholder="أضف مهمة..." class="input-field" />
        <select id="priority" class="dropdown">
            <option value="low">منخفضة</option>
            <option value="medium">متوسطة</option>
            <option value="high">عالية</option>
        </select>
        <select id="category" class="dropdown">
            <option value="work">🏢 العمل</option>
            <option value="study">📚 الدراسة</option>
            <option value="personal">🏡 الشخصية</option>
        </select>
        <input type="date" id="due-date" class="input-date" />
        <button onclick="addTask()" class="btn add-task-btn">إضافة مهمة</button>
    </div>

    <!-- قائمة المهام -->
    <h3 class="section-subtitle">المهام اليومية</h3>
    <div id="task-list" class="task-list"></div>

    <!-- تقدم الأهداف اليومية -->
    <h3 class="section-subtitle">🎯 تقدم الأهداف اليومية</h3>
    <div class="progress-bar-container">
        <div class="progress-bar">
            <span id="daily-progress-bar"></span>
        </div>
        <p id="progress-text"></p>
    </div>

    <style>
        .task-section {
            padding: 20px;
            background: linear-gradient(145deg, #121212, #1e1e1e);
            border-radius: 15px;
            color: #fff;
            font-family: 'Arial', sans-serif;
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.5);
        }
        .section-title, .section-subtitle {
            text-align: center;
            margin-bottom: 20px;
            color: #ffd700;
        }
        .task-controls {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin-bottom: 20px;
        }
        .input-field, .dropdown, .input-date {
            padding: 10px;
            border: 1px solid #ffd700;
            border-radius: 5px;
            background: #222;
            color: #fff;
            font-size: 1rem;
        }
        .btn {
            padding: 10px 20px;
            background: #ffd700;
            color: #000;
            font-weight: bold;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s ease-in-out;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        }
        .btn:hover {
            background: #f8c400;
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.4);
        }
        .task-list {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }
        .task {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            background: #292929;
            border-radius: 10px;
            border-left: 5px solid;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
            transition: transform 0.3s, box-shadow 0.3s;
        }
        .task.low { border-color: #28a745; }
        .task.medium { border-color: #ff9800; }
        .task.high { border-color: #dc3545; }
        .task:hover {
            transform: scale(1.02);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.4);
        }
        .progress-bar-container {
            width: 100%;
            margin: 20px 0;
        }
        .progress-bar {
            background: #333;
            border-radius: 10px;
            overflow: hidden;
            height: 20px;
            position: relative;
        }
        .progress-bar span {
            display: block;
            height: 100%;
            background: linear-gradient(90deg, red, orange, green);
            width: 0;
            transition: width 0.5s ease;
        }
    </style>

    <script>
        let tasks = [];

        function addTask() {
            const taskInput = document.getElementById("task-input").value;
            const priority = document.getElementById("priority").value;
            const category = document.getElementById("category").value;
            const dueDate = document.getElementById("due-date").value;

            if (!taskInput) {
                alert("يرجى إدخال مهمة!");
                return;
            }

            const task = {
                id: Date.now(),
                text: taskInput,
                priority,
                category,
                dueDate,
                completed: false
            };

            tasks.push(task);
            document.getElementById("task-input").value = "";
            renderTasks();
            updateProgress();
        }

        function renderTasks() {
            const taskList = document.getElementById("task-list");
            taskList.innerHTML = tasks.map(task => `
                <div class="task ${task.priority}">
                    <div>
                        <strong>${task.text}</strong>
                        <p>الأولوية: ${task.priority}</p>
                        <p>الفئة: ${task.category}</p>
                        <p>تاريخ الاستحقاق: ${task.dueDate || 'غير محدد'}</p>
                    </div>
                    <div class="task-actions">
                        <button onclick="toggleTask(${task.id})" class="btn">⏳ ${task.completed ? 'غير مكتملة' : 'مكتملة'}</button>
                        <button onclick="deleteTask(${task.id})" class="btn delete-btn">🗑️ حذف</button>
                    </div>
                </div>
            `).join("");
        }

        function toggleTask(id) {
            const task = tasks.find(t => t.id === id);
            if (task) task.completed = !task.completed;
            renderTasks();
            updateProgress();
        }

        function deleteTask(id) {
            tasks = tasks.filter(task => task.id !== id);
            renderTasks();
            updateProgress();
        }

        function updateProgress() {
            const completedTasks = tasks.filter(t => t.completed).length;
            const progress = tasks.length ? (completedTasks / tasks.length) * 100 : 0;
            document.getElementById("daily-progress-bar").style.width = progress + "%";
            document.getElementById("progress-text").textContent = `تم إنجاز ${completedTasks} من ${tasks.length} مهام.`;
        }
    </script>
</section>
        </section>
    
<section id="monthly" class="section calendar">
<h2>📅 التقويم الشهري</h2>
<div class="calendar-container">
<div class="calendar-header">
<button class="btn" onclick="previousMonth()">السابق</button>
<h3 id="currentMonth">ديسمبر 2024</h3>
<button class="btn" onclick="nextMonth()">التالي</button>
</div>
<div class="calendar-grid" id="calendarGrid"></div>
</div>
</section>
<script>
    const calendarGrid = document.getElementById("calendarGrid");
    const currentMonth = document.getElementById("currentMonth");
    let date = new Date();

    function renderCalendar() {
        calendarGrid.innerHTML = "";
        const firstDayIndex = new Date(date.getFullYear(), date.getMonth(), 1).getDay();
        const daysInMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();
        currentMonth.textContent = date.toLocaleDateString("ar-SA", { year: 'numeric', month: 'long' });

        for (let i = 0; i < firstDayIndex; i++) {
            const emptyCell = document.createElement("div");
            emptyCell.classList.add("calendar-day", "empty");
            calendarGrid.appendChild(emptyCell);
        }
        for (let day = 1; day <= daysInMonth; day++) {
            const dayCell = document.createElement("div");
            dayCell.textContent = day;
            dayCell.classList.add("calendar-day");
            dayCell.onclick = () => showModal('📅 يوم مختار', `لقد اخترت يوم ${day}`);
            calendarGrid.appendChild(dayCell);
        }
    }
    function previousMonth() {
        date.setMonth(date.getMonth() - 1);
        renderCalendar();
    }
    function nextMonth() {
        date.setMonth(date.getMonth() + 1);
        renderCalendar();
    }
    renderCalendar();

    
    </script>
<style>
    .calendar-container {
        margin: 2rem 0;
        padding: 1rem;
        border-radius: 10px;
        background: rgba(58, 80, 107, 0.1);
    }
    .calendar-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }
    .calendar-grid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 0.5rem;
    }
    .calendar-day {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 1rem;
        background: #1a1a1a;
        border-radius: 5px;
        transition: all 0.3s ease;
        font-weight: bold;
    }
    .calendar-day:hover {
        background: #d4af37;
        color: #1a1a1a;
    }
    .calendar-day.empty {
        background: transparent;
    }

    .auth-container {
        position: absolute;
        top: 15px;
        right: 20px;
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .auth-btn {
        background: var(--accent);
        color: var(--light);
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 5px;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.3);
    }

    .auth-btn:hover {
        background: var(--primary);
        color: var(--light);
    }

    .user-profile {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .user-profile img {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        border: 2px solid var(--accent);
    }

    .user-profile span {
        color: var(--light);
        font-weight: bold;
    }
    </style>

<script src="https://cdn.jsdelivr.net/npm/chart.js">
</script>
<script>
    // Chart 1: Task Completion Pie Chart
    const taskChartCtx = document.getElementById('tasksChart').getContext('2d');
    new Chart(taskChartCtx, {
        type: 'pie',
        data: {
            labels: ['مهام مكتملة', 'مهام غير مكتملة'],
            datasets: [{
                data: [70, 30],
                backgroundColor: ['#4CAF50', '#f44336'],
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'bottom'
                },
                title: {
                    display: true,
                    text: 'توزيع المهام'
                }
            }
        }
    });

    // Chart 2: Pomodoro Hours Bar Chart
    const pomodoroChartCtx = document.getElementById('pomodoroHoursChart').getContext('2d');
    new Chart(pomodoroChartCtx, {
        type: 'bar',
        data: {
            labels: ['الإثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة'],
            datasets: [{
                label: 'ساعات بومودورو',
                data: [2, 4, 3, 5, 6],
                backgroundColor: '#d4af37'
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true
                }
            },
            plugins: {
                legend: {
                    display: false
                },
                title: {
                    display: true,
                    text: 'ساعات بومودورو لكل يوم'
                }
            }
        }
    });

    // Chart 3: Combined Stats Radar Chart
    const combinedChartCtx = document.getElementById('combinedStatsChart').getContext('2d');
    new Chart(combinedChartCtx, {
        type: 'radar',
        data: {
            labels: ['إنتاجية', 'تركيز', 'إكمال المهام', 'إدارة الوقت', 'أهداف'],
            datasets: [{
                label: 'الأداء اليومي',
                data: [80, 75, 90, 85, 70],
                backgroundColor: 'rgba(212, 175, 55, 0.5)',
                borderColor: '#d4af37',
                borderWidth: 2
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'bottom'
                },
                title: {
                    display: true,
                    text: 'إحصائيات الأداء اليومية'
                }
            },
            scales: {
                r: {
                    angleLines: {
                        color: '#444'
                    },
                    grid: {
                        color: '#666'
                    },
                    pointLabels: {
                        color: '#fff'
                    }
                }
            }
        }
    });

    
    </script>
</div>
<footer>© 2024 ReaperYBSTUDY. جميع الحقوق محفوظة.
<section class="section planner" id="weekly-planner">
<h2>📅 المخطط الأسبوعي</h2>
<div class="weekly-planner-container">
<table class="weekly-planner-table">
<thead>
<tr>
<th>الساعة</th>
<th>الإثنين</th>
<th>الثلاثاء</th>
<th>الأربعاء</th>
<th>الخميس</th>
<th>الجمعة</th>
<th>السبت</th>
<th>الأحد</th>
</tr>
</thead>
<tbody>
<tr><td>0:00</td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td></tr><tr><td>1:00</td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td></tr><tr><td>2:00</td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td></tr><tr><td>3:00</td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td></tr><tr><td>4:00</td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td></tr><tr><td>5:00</td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td></tr><tr><td>6:00</td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td></tr><tr><td>7:00</td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td></tr><tr><td>8:00</td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td></tr><tr><td>9:00</td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td></tr><tr><td>10:00</td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td></tr><tr><td>11:00</td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td></tr><tr><td>12:00</td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td></tr><tr><td>13:00</td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td></tr><tr><td>14:00</td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td></tr><tr><td>15:00</td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td></tr><tr><td>16:00</td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td></tr><tr><td>17:00</td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td></tr><tr><td>18:00</td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td></tr><tr><td>19:00</td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td></tr><tr><td>20:00</td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td></tr><tr><td>21:00</td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td></tr><tr><td>22:00</td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td></tr><tr><td>23:00</td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td><td contenteditable="true"></td></tr>
</tbody>
</table>
</div>
<button class="btn merge-cells-btn" onclick="mergeCells()">دمج الخانات</button>
</section>
<script>
    // Add functionality for merging table cells
    function mergeCells() {
        showModal('⚙️ تطوير', 'ميزة دمج الخانات قيد التطوير!');
    }

    
    </script>
<style>
    .weekly-planner-container {
        margin: 2rem 0;
        overflow-x: auto;
        border-radius: 10px;
        background: rgba(58, 80, 107, 0.1);
        padding: 1rem;
    }
    .weekly-planner-table {
        width: 100%;
        border-collapse: collapse;
        text-align: center;
        color: #f5f5f5;
    }
    .weekly-planner-table th, .weekly-planner-table td {
        border: 1px solid #d4af37;
        padding: 0.5rem;
        min-width: 100px;
    }
    .weekly-planner-table th {
        background: #d4af37;
    }
    .weekly-planner-table td {
        background: #1a1a1a;
    }
    .weekly-planner-table td:hover {
        background: #d4af37;
        color: #1a1a1a;
    }

    .auth-container {
        position: absolute;
        top: 15px;
        right: 20px;
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .auth-btn {
        background: var(--accent);
        color: var(--light);
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 5px;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.3);
    }

    .auth-btn:hover {
        background: var(--primary);
        color: var(--light);
    }

    .user-profile {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .user-profile img {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        border: 2px solid var(--accent);
    }

    .user-profile span {
        color: var(--light);
        font-weight: bold;
    }
    </style>
</footer>
<script src="https://cdn.jsdelivr.net/npm/chart.js">
</script>
<script>
        const ctx = document.getElementById('pyramidChart').getContext('2d');
        const pyramidChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ['الأساسيات', 'المتوسط', 'المتقدم'],
                datasets: [{
                    label: 'عدد المهام',
                    data: [50, 30, 10],
                    backgroundColor: ['#4CAF50', '#FFC107', '#f44336'],
                }]
            },
            options: {
                indexAxis: 'y',
                scales: {
                    x: {
                        beginAtZero: true
                    }
                }
            }
        });
    
    
    </script>
<section class="section stats" id="engineering-stats">
<h2>📐 إحصائيات هندسية</h2>
<div class="chart-container">
<canvas id="dailyTaskCompletionChart"></canvas>
</div>
<div class="chart-container">
<canvas id="weeklyProgressChart"></canvas>
</div>
<div class="chart-container">
<canvas id="remainingTasksChart"></canvas>
</div>
</section>
<script>
    // Daily Task Completion Chart
    const dailyTaskCompletionCtx = document.getElementById('dailyTaskCompletionChart').getContext('2d');
    new Chart(dailyTaskCompletionCtx, {
        type: 'bar',
        data: {
            labels: ['الأحد', 'الإثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت'],
            datasets: [{
                label: 'إكمال المهام اليومية',
                data: [10, 15, 20, 25, 30, 35, 40],
                backgroundColor: '#4CAF50'
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true
                }
            },
            plugins: {
                legend: {
                    position: 'top'
                },
                title: {
                    display: true,
                    text: 'إكمال المهام اليومية'
                }
            }
        }
    });

    // Weekly Progress Chart
    const weeklyProgressCtx = document.getElementById('weeklyProgressChart').getContext('2d');
    new Chart(weeklyProgressCtx, {
        type: 'line',
        data: {
            labels: ['الأحد', 'الإثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت'],
            datasets: [{
                label: 'التقدم الأسبوعي',
                data: [10, 20, 15, 30, 25, 35, 40],
                borderColor: '#FFC107',
                borderWidth: 2,
                fill: false
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'top'
                },
                title: {
                    display: true,
                    text: 'التقدم الأسبوعي'
                }
            },
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    // Remaining Tasks Chart
    const remainingTasksCtx = document.getElementById('remainingTasksChart').getContext('2d');
    new Chart(remainingTasksCtx, {
        type: 'pie',
        data: {
            labels: ['مهام مكتملة', 'مهام متبقية'],
            datasets: [{
                data: [70, 30],
                backgroundColor: ['#4CAF50', '#F44336']
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'top'
                },
                title: {
                    display: true,
                    text: 'المهام المكتملة والمتبقية'
                }
            }
        }
    });
</script>
<!-- Modal Structure -->
<div class="modal" id="customModal">
<div class="modal-content">
<span class="close-btn">×</span>
<h2 id="modalTitle">إشعار</h2>
<p id="modalMessage">رسالة توضيحية هنا</p>
<button class="btn" id="modalCloseBtn">حسنًا</button>
</div>
</div>
<style>
/* Modal styling */
.modal {
  display: none;
  position: fixed;
  z-index: 1000;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.6);
}
.modal-content {
  background: #1a1a1a;
  color: #d4af37;
  margin: 15% auto;
  padding: 20px;
  border-radius: 10px;
  width: 80%;
  max-width: 400px;
  text-align: center;
  box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.5);
}
.close-btn {
  color: #d4af37;
  font-size: 25px;
  font-weight: bold;
  position: absolute;
  right: 20px;
  top: 10px;
  cursor: pointer;
}
.close-btn:hover {
  color: #f5c85c;
}
#modalTitle {
  font-size: 1.5rem;
  margin-bottom: 1rem;
}
#modalMessage {
  font-size: 1.2rem;
  line-height: 1.5;
  margin-bottom: 1.5rem;
}
.btn {
  background: #d4af37;
  color: #1a1a1a;
  padding: 0.7rem 1.5rem;
  border: none;
  border-radius: 5px;
  font-size: 1rem;
  cursor: pointer;
}
</style>
<script>
function showModal(title, message) {
    const modal = document.getElementById('customModal');
    document.getElementById('modalTitle').textContent = title;
    document.getElementById('modalMessage').textContent = message;
    modal.style.display = 'block';
    document.querySelector('.close-btn').onclick = () => {
        modal.style.display = 'none';
    };
    document.getElementById('modalCloseBtn').onclick = () => {
        modal.style.display = 'none';
    };
    window.onclick = (event) => {
        if (event.target === modal) {
            modal.style.display = 'none';
        }
    };
}
</script>

<!-- Register Form -->

<!-- Login Form -->


<script>
    // Show and hide forms
    function showRegisterForm() {
        document.getElementById('registerForm').style.display = 'block';
        document.getElementById('loginForm').style.display = 'none';
    }
    function showLoginForm() {
        document.getElementById('loginForm').style.display = 'block';
        document.getElementById('registerForm').style.display = 'none';
    }

    // Register User
    function registerUser() {
        const username = document.getElementById("username").value;
        const password = document.getElementById("password").value;
        const fileInput = document.getElementById("profileImage");
        const file = fileInput.files[0];

        if (!username || !password || !file) {
            console.error("يرجى إدخال جميع الحقول!");
            return;
        }

        const reader = new FileReader();
        reader.onload = function (e) {
            const userData = {
                username,
                password,
                image: e.target.result // Store image as Base64
            };
            localStorage.setItem("userData", JSON.stringify(userData));
        };
        reader.readAsDataURL(file);
    }

    // Login User
    function loginUser() {
        const username = document.getElementById("loginUsername").value;
        const password = document.getElementById("loginPassword").value;

        const storedData = localStorage.getItem("userData");
        if (!storedData) {
            console.error("لا يوجد بيانات حساب محفوظة!");
            return;
        }

        const userData = JSON.parse(storedData);
        if (userData.username === username && userData.password === password) {
            document.getElementById("userProfile").style.display = "flex";
            document.getElementById("userImage").src = userData.image;
            document.getElementById("userName").textContent = userData.username;
        } else {
            console.error("اسم المستخدم أو كلمة المرور غير صحيحة!");
        }
    }
</script>

<script>
    function showRegisterForm() {
        document.getElementById('registerForm').style.display = 'block';
        document.getElementById('loginForm').style.display = 'none';
    }

    function showLoginForm() {
        document.getElementById('loginForm').style.display = 'block';
        document.getElementById('registerForm').style.display = 'none';
    }

    function registerUser() {
        const username = document.getElementById("username").value;
        const password = document.getElementById("password").value;
        const fileInput = document.getElementById("profileImage");
        const file = fileInput.files[0];

        if (!username || !password || !file) {
            console.error("يرجى إدخال جميع الحقول!");
            return;
        }

        const reader = new FileReader();
        reader.onload = function (e) {
            const userData = {
                username,
                password,
                image: e.target.result // Store image as Base64
            };
            localStorage.setItem("userData", JSON.stringify(userData));
        };
        reader.readAsDataURL(file);
    }

    function loginUser() {
        const username = document.getElementById("loginUsername").value;
        const password = document.getElementById("loginPassword").value;

        const storedData = localStorage.getItem("userData");
        if (!storedData) {
            console.error("لا يوجد بيانات حساب محفوظة!");
            return;
        }

        const userData = JSON.parse(storedData);
        if (userData.username === username && userData.password === password) {
            console.log("تم تسجيل الدخول بنجاح!");
        } else {
            console.error("اسم المستخدم أو كلمة المرور غير صحيحة!");
        }
    }
</script>

<script>
    function showRegisterForm() {
        document.getElementById('registerForm').style.display = 'block';
        document.getElementById('loginForm').style.display = 'none';
    }

    function showLoginForm() {
        document.getElementById('loginForm').style.display = 'block';
        document.getElementById('registerForm').style.display = 'none';
    }

    function registerUser() {
        const username = document.getElementById("username").value;
        const password = document.getElementById("password").value;
        const fileInput = document.getElementById("profileImage");
        const file = fileInput.files[0];

        if (!username || !password || !file) {
            console.error("يرجى إدخال جميع الحقول!");
            return;
        }

        const reader = new FileReader();
        reader.onload = function (e) {
            const userData = {
                username,
                password,
                image: e.target.result // تخزين الصورة كـ Base64
            };

            localStorage.setItem("userData", JSON.stringify(userData));

            // إخفاء النموذج
            document.getElementById("registerForm").style.display = "none";

            // عرض رسالة نجاح
            const successMessage = document.createElement("div");
            successMessage.textContent = "تم إنشاء الحساب بنجاح!";
            successMessage.style.cssText = `
                background: var(--success);
                color: var(--light);
                padding: 0.5rem;
                margin: 1rem auto;
                text-align: center;
                border-radius: 5px;
                width: 300px;
            `;
            document.body.appendChild(successMessage);

            // إزالة الرسالة بعد 3 ثوانٍ
            setTimeout(() => successMessage.remove(), 3000);
        };
        reader.readAsDataURL(file);
    }

    function loginUser() {
        const username = document.getElementById("loginUsername").value;
        const password = document.getElementById("loginPassword").value;

        const storedData = localStorage.getItem("userData");
        if (!storedData) {
            console.error("لا يوجد بيانات حساب محفوظة!");
            return;
        }

        const userData = JSON.parse(storedData);
        if (userData.username === username && userData.password === password) {
            console.log("تم تسجيل الدخول بنجاح!");
        } else {
            console.error("اسم المستخدم أو كلمة المرور غير صحيحة!");
        }
    }
</script>

<script>
    function showRegisterForm() {
        document.getElementById('registerForm').style.display = 'block';
        document.getElementById('loginForm').style.display = 'none';
    }

    function showLoginForm() {
        document.getElementById('loginForm').style.display = 'block';
        document.getElementById('registerForm').style.display = 'none';
    }

    function registerUser() {
        const username = document.getElementById("username").value;
        const password = document.getElementById("password").value;
        const fileInput = document.getElementById("profileImage");
        const file = fileInput.files[0];

        if (!username || !password || !file) {
            console.error("يرجى إدخال جميع الحقول!");
            return;
        }

        const reader = new FileReader();
        reader.onload = function (e) {
            const userData = {
                username,
                password,
                image: e.target.result // تخزين الصورة كـ Base64
            };

            localStorage.setItem("userData", JSON.stringify(userData));

            // إخفاء النموذج
            document.getElementById("registerForm").style.display = "none";

            // عرض رسالة نجاح
            const successMessage = document.createElement("div");
            successMessage.textContent = "تم إنشاء الحساب بنجاح!";
            successMessage.style.cssText = `
                background: var(--success);
                color: var(--light);
                padding: 0.5rem;
                margin: 1rem auto;
                text-align: center;
                border-radius: 5px;
                width: 300px;
            `;
            document.body.appendChild(successMessage);

            // إزالة الرسالة بعد 3 ثوانٍ
            setTimeout(() => successMessage.remove(), 3000);
        };
        reader.readAsDataURL(file);
    }

    function loginUser() {
        const username = document.getElementById("loginUsername").value;
        const password = document.getElementById("loginPassword").value;

        const storedData = localStorage.getItem("userData");
        if (!storedData) {
            console.error("لا يوجد بيانات حساب محفوظة!");
            return;
        }

        const userData = JSON.parse(storedData);
        if (userData.username === username && userData.password === password) {
            // إخفاء نافذة تسجيل الدخول
            document.getElementById("loginForm").style.display = "none";

            // عرض رسالة نجاح
            const successMessage = document.createElement("div");
            successMessage.textContent = "تم تسجيل الدخول بنجاح!";
            successMessage.style.cssText = `
                background: var(--success);
                color: var(--light);
                padding: 0.5rem;
                margin: 1rem auto;
                text-align: center;
                border-radius: 5px;
                width: 300px;
            `;
            document.body.appendChild(successMessage);

            // إزالة الرسالة بعد 3 ثوانٍ
            setTimeout(() => successMessage.remove(), 3000);
        } else {
            console.error("اسم المستخدم أو كلمة المرور غير صحيحة!");
        }
    }
</script>

<script>
    function showRegisterForm() {
        document.getElementById('registerForm').style.display = 'block';
        document.getElementById('loginForm').style.display = 'none';
    }

    function showLoginForm() {
        document.getElementById('loginForm').style.display = 'block';
        document.getElementById('registerForm').style.display = 'none';
    }

    function registerUser() {
        const username = document.getElementById("username").value;
        const password = document.getElementById("password").value;
        const fileInput = document.getElementById("profileImage");
        const file = fileInput.files[0];

        if (!username || !password || !file) {
            console.error("يرجى إدخال جميع الحقول!");
            return;
        }

        const reader = new FileReader();
        reader.onload = function (e) {
            const userData = {
                username,
                password,
                image: e.target.result // تخزين الصورة كـ Base64
            };

            localStorage.setItem("userData", JSON.stringify(userData));

            // إخفاء النموذج
            document.getElementById("registerForm").style.display = "none";

            // عرض رسالة نجاح
            const successMessage = document.createElement("div");
            successMessage.textContent = "تم إنشاء الحساب بنجاح!";
            successMessage.style.cssText = `
                background: var(--success);
                color: var(--light);
                padding: 0.5rem;
                margin: 1rem auto;
                text-align: center;
                border-radius: 5px;
                width: 300px;
            `;
            document.body.appendChild(successMessage);

            // إزالة الرسالة بعد 3 ثوانٍ
            setTimeout(() => successMessage.remove(), 3000);
        };
        reader.readAsDataURL(file);
    }

    function loginUser() {
        const username = document.getElementById("loginUsername").value;
        const password = document.getElementById("loginPassword").value;

        const storedData = localStorage.getItem("userData");
        if (!storedData) {
            console.error("لا يوجد بيانات حساب محفوظة!");
            return;
        }

        const userData = JSON.parse(storedData);
        if (userData.username === username && userData.password === password) {
            // إخفاء نافذة تسجيل الدخول
            document.getElementById("loginForm").style.display = "none";

            // عرض رسالة نجاح
            const successMessage = document.createElement("div");
            successMessage.textContent = "تم تسجيل الدخول بنجاح!";
            successMessage.style.cssText = `
                background: var(--success);
                color: var(--light);
                padding: 0.5rem;
                margin: 1rem auto;
                text-align: center;
                border-radius: 5px;
                width: 300px;
            `;
            document.body.appendChild(successMessage);

            // تحديث صورة الحساب واسم المستخدم
            const userProfile = document.getElementById("userProfile");
            const userImage = document.getElementById("userImage");
            const userName = document.getElementById("userName");
            if (userProfile && userImage && userName) {
                userImage.src = userData.image;
                userName.textContent = userData.username;
                userProfile.style.display = "flex";
            }

            // إزالة الرسالة بعد 3 ثوانٍ
            setTimeout(() => successMessage.remove(), 3000);
        } else {
            console.error("اسم المستخدم أو كلمة المرور غير صحيحة!");
        }
    }
</script>

<script>
    function showRegisterForm() {
        document.getElementById('registerForm').style.display = 'block';
        document.getElementById('loginForm').style.display = 'none';
    }

    function showLoginForm() {
        document.getElementById('loginForm').style.display = 'block';
        document.getElementById('registerForm').style.display = 'none';
    }

    function registerUser() {
        const username = document.getElementById("username").value;
        const password = document.getElementById("password").value;
        const fileInput = document.getElementById("profileImage");
        const file = fileInput.files[0];

        if (!username || !password || !file) {
            console.error("يرجى إدخال جميع الحقول!");
            return;
        }

        const reader = new FileReader();
        reader.onload = function (e) {
            const userData = {
                username,
                password,
                image: e.target.result // تخزين الصورة كـ Base64
            };

            localStorage.setItem("userData", JSON.stringify(userData));

            // إخفاء النموذج
            document.getElementById("registerForm").style.display = "none";

            // عرض رسالة نجاح
            const successMessage = document.createElement("div");
            successMessage.textContent = "تم إنشاء الحساب بنجاح!";
            successMessage.style.cssText = `
                background: var(--success);
                color: var(--light);
                padding: 0.5rem;
                margin: 1rem auto;
                text-align: center;
                border-radius: 5px;
                width: 300px;
            `;
            document.body.appendChild(successMessage);

            // إزالة الرسالة بعد 3 ثوانٍ
            setTimeout(() => successMessage.remove(), 3000);
        };
        reader.readAsDataURL(file);
    }

    function loginUser() {
        const username = document.getElementById("loginUsername").value;
        const password = document.getElementById("loginPassword").value;

        const storedData = localStorage.getItem("userData");
        if (!storedData) {
            console.error("لا يوجد بيانات حساب محفوظة!");
            return;
        }

        const userData = JSON.parse(storedData);
        if (userData.username === username && userData.password === password) {
            // إخفاء نافذة تسجيل الدخول
            document.getElementById("loginForm").style.display = "none";

            // إخفاء أزرار إنشاء الحساب وتسجيل الدخول
            document.getElementById("registerBtn").style.display = "none";
            document.getElementById("loginBtn").style.display = "none";

            // عرض رسالة نجاح
            const successMessage = document.createElement("div");
            successMessage.textContent = "تم تسجيل الدخول بنجاح!";
            successMessage.style.cssText = `
                background: var(--success);
                color: var(--light);
                padding: 0.5rem;
                margin: 1rem auto;
                text-align: center;
                border-radius: 5px;
                width: 300px;
            `;
            document.body.appendChild(successMessage);

            // تحديث صورة الحساب واسم المستخدم
            const userProfile = document.getElementById("userProfile");
            const userImage = document.getElementById("userImage");
            const userName = document.getElementById("userName");
            if (userProfile && userImage && userName) {
                userImage.src = userData.image;
                userName.textContent = userData.username;
                userProfile.style.display = "flex";
            }

            // إزالة الرسالة بعد 3 ثوانٍ
            setTimeout(() => successMessage.remove(), 3000);
        } else {
            console.error("اسم المستخدم أو كلمة المرور غير صحيحة!");
        }
    }
</script>
</body>
</html>
<section class="section" id="music-player">
<h2>🎵 مشغل موسيقى</h2>
<div class="music-player-container">
<input id="search-bar" onkeyup="searchSong()" placeholder="ابحث عن أغنية..." type="text"/>
<div class="playlist" id="playlist">
<!-- Example playlist items -->
<div class="song">
<img alt="Album Cover" src="https://via.placeholder.com/50">
<div>
<h4>اسم الأغنية</h4>
<p>اسم الفنان</p>
</div>
<button onclick="playSong('https://www.example.com/song.mp3')">تشغيل</button>
</img></div>
</div>
<audio controls="" id="audio-player">
<source src="" type="audio/mp3"/>
            متصفحك لا يدعم مشغل الصوت.
        </audio>
</div>
</section>
<script>
    function searchSong() {
        const searchValue = document.getElementById('search-bar').value.toLowerCase();
        const songs = document.querySelectorAll('.song');
        songs.forEach(song => {
            const songName = song.querySelector('h4').textContent.toLowerCase();
            if (songName.includes(searchValue)) {
                song.style.display = 'block';
            } else {
                song.style.display = 'none';
            }
        });
    }

    function playSong(url) {
        const player = document.getElementById('audio-player');
        player.src = url;
        player.play();
    }

    
    </script>
<style>
    .music-player-container {
        padding: 1rem;
        background: #1e1e1e;
        border-radius: 10px;
        text-align: center;
    }
    #search-bar {
        width: 80%;
        padding: 0.5rem;
        margin-bottom: 1rem;
        border: 1px solid #d4af37;
        border-radius: 5px;
        background: #121212;
        color: #f5f5f5;
    }
    .playlist {
        max-height: 200px;
        overflow-y: auto;
        margin-bottom: 1rem;
    }
    .song {
        display: flex;
        align-items: center;
        background: rgba(255, 255, 255, 0.1);
        margin: 0.5rem 0;
        padding: 0.5rem;
        border-radius: 5px;
    }
    .song img {
        margin-right: 1rem;
        border-radius: 5px;
    }
    .song button {
        margin-left: auto;
        padding: 0.5rem;
        background: #d4af37;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        color: #121212;
    }
    .song button:hover {
        background: #f5c85c;
    }

    .auth-container {
        position: absolute;
        top: 15px;
        right: 20px;
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .auth-btn {
        background: var(--accent);
        color: var(--light);
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 5px;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.3);
    }

    .auth-btn:hover {
        background: var(--primary);
        color: var(--light);
    }

    .user-profile {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .user-profile img {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        border: 2px solid var(--accent);
    }

    .user-profile span {
        color: var(--light);
        font-weight: bold;
    }
    </style>
